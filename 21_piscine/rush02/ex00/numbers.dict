0: zero
1: one
2: two
3: three
4: four
5: five
6: six
7: seven
8: eight
9: nine
10: ten
11: eleven
12: twelve
13: thirteen
14: fourteen
15: fifteen
16: sixteen
17: seventeen
18: eighteen
19: nineteen
20: twenty
30: thirty
40: forty
50: fifty
60: sixty
70: seventy
80: eighty
90: ninety
100: hundred
1000: thousand
1000000: million
1000000000: billion
1000000000000: trillion
1000000000000000: quadrillion
1000000000000000000: quintillion
1000000000000000000000: sextillion
1000000000000000000000000: septillion
1000000000000000000000000000: octillion
1000000000000000000000000000000: nonillion
1000000000000000000000000000000000: decillion
1000000000000000000000000000000000000: undecillion

1  0 0 0 
0  1 2 3 <-  5 / 3 = 1

1  0 0 0  0 0 0
0  1 2 3  4 5 6 <- 8 / 3 = 2

1  0 0 0  0 0 0  0 0 0
0  1 2 3  4 5 6  7 8 9 <- 11 / 3 = 3

1  0 0 0  0 0 0  0 0 0 0  0  0
0  1 2 3  4 5 6  7 8 9 10 11 12 <- (ind * 3 + 1) = not_number

while (a[i] != '1' && a[ind] != '0' && (!(a[ind + 1] < '0' && a[ind + 1] > '9'))
	i++;

ind = (ft_strlen - 1) / 3;
int i;
int zeroes = (strlen - 1) / 3

while (i < zeroes)

i * 3

char		*ft_find_zeroes(char *str, char *a, int length)
{

}